// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: go_grpc_api/v1/buf_validate_example.proto

package go_grpc_apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "go-grpc-api/tools/grpc/go_grpc_api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "go_grpc_api.v1.TaskService"
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "go_grpc_api.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceCreateTaskProcedure is the fully-qualified name of the TaskService's CreateTask RPC.
	TaskServiceCreateTaskProcedure = "/go_grpc_api.v1.TaskService/CreateTask"
	// TaskServiceGetTaskByUserProcedure is the fully-qualified name of the TaskService's GetTaskByUser
	// RPC.
	TaskServiceGetTaskByUserProcedure = "/go_grpc_api.v1.TaskService/GetTaskByUser"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/go_grpc_api.v1.UserService/GetUser"
)

// TaskServiceClient is a client for the go_grpc_api.v1.TaskService service.
type TaskServiceClient interface {
	CreateTask(context.Context, *connect_go.Request[v1.CreateTaskRequest]) (*connect_go.Response[v1.CreateTaskResponse], error)
	GetTaskByUser(context.Context, *connect_go.Request[v1.GetTaskByUserRequest]) (*connect_go.Response[v1.GetTaskByUserResponse], error)
}

// NewTaskServiceClient constructs a client for the go_grpc_api.v1.TaskService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &taskServiceClient{
		createTask: connect_go.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+TaskServiceCreateTaskProcedure,
			opts...,
		),
		getTaskByUser: connect_go.NewClient[v1.GetTaskByUserRequest, v1.GetTaskByUserResponse](
			httpClient,
			baseURL+TaskServiceGetTaskByUserProcedure,
			opts...,
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	createTask    *connect_go.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	getTaskByUser *connect_go.Client[v1.GetTaskByUserRequest, v1.GetTaskByUserResponse]
}

// CreateTask calls go_grpc_api.v1.TaskService.CreateTask.
func (c *taskServiceClient) CreateTask(ctx context.Context, req *connect_go.Request[v1.CreateTaskRequest]) (*connect_go.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTaskByUser calls go_grpc_api.v1.TaskService.GetTaskByUser.
func (c *taskServiceClient) GetTaskByUser(ctx context.Context, req *connect_go.Request[v1.GetTaskByUserRequest]) (*connect_go.Response[v1.GetTaskByUserResponse], error) {
	return c.getTaskByUser.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the go_grpc_api.v1.TaskService service.
type TaskServiceHandler interface {
	CreateTask(context.Context, *connect_go.Request[v1.CreateTaskRequest]) (*connect_go.Response[v1.CreateTaskResponse], error)
	GetTaskByUser(context.Context, *connect_go.Request[v1.GetTaskByUserRequest]) (*connect_go.Response[v1.GetTaskByUserResponse], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	taskServiceCreateTaskHandler := connect_go.NewUnaryHandler(
		TaskServiceCreateTaskProcedure,
		svc.CreateTask,
		opts...,
	)
	taskServiceGetTaskByUserHandler := connect_go.NewUnaryHandler(
		TaskServiceGetTaskByUserProcedure,
		svc.GetTaskByUser,
		opts...,
	)
	return "/go_grpc_api.v1.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceCreateTaskProcedure:
			taskServiceCreateTaskHandler.ServeHTTP(w, r)
		case TaskServiceGetTaskByUserProcedure:
			taskServiceGetTaskByUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) CreateTask(context.Context, *connect_go.Request[v1.CreateTaskRequest]) (*connect_go.Response[v1.CreateTaskResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("go_grpc_api.v1.TaskService.CreateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) GetTaskByUser(context.Context, *connect_go.Request[v1.GetTaskByUserRequest]) (*connect_go.Response[v1.GetTaskByUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("go_grpc_api.v1.TaskService.GetTaskByUser is not implemented"))
}

// UserServiceClient is a client for the go_grpc_api.v1.UserService service.
type UserServiceClient interface {
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
}

// NewUserServiceClient constructs a client for the go_grpc_api.v1.UserService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		getUser: connect_go.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUser *connect_go.Client[v1.GetUserRequest, v1.GetUserResponse]
}

// GetUser calls go_grpc_api.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the go_grpc_api.v1.UserService service.
type UserServiceHandler interface {
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userServiceGetUserHandler := connect_go.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		opts...,
	)
	return "/go_grpc_api.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("go_grpc_api.v1.UserService.GetUser is not implemented"))
}
